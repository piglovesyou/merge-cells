function calcRowspanRecur(e,r,a,l=[],o=[]){if(0==e.length)return o;var[n,...t]=e,e=r.reduce((e,r)=>(e[r]=1,e),{}),c={row:n,rowspan:e},s=(o.push(e),[]);for(let e=0;e<r.length;e++){var p=r[e],w=l[e];if(!w||a(n,p)!==a(w.row,p))return calcRowspanRecur(t,r,a,[...s,...Array(r.length-s.length).fill(c)],o);w.rowspan[p]++,c.rowspan[p]=0,s.push(w)}return calcRowspanRecur(t,r,a,s,o)}function applyRowspanToTable(e,r){for(var a of e.tBodies){a.remove();var l=calcRowspanWithTableRows(a.rows,r);for(let e=0;e<a.rows.length;e++){var o=a.rows.item(e),n=l[e];for(let e=0;e<o.cells.length;e++){var t=o.cells.item(e);0===n[e]?t.style.display="none":t.setAttribute("rowspan",n[e].toString())}}e.appendChild(a)}}function calcRowspanWithTableRows(e,r=e[0]?Array.from(Array(e[0].cells.length).keys()):[]){return calcRowspanRecur(Array.from(e),r,(e,r)=>e.cells[r].textContent)}function calcRowspanFromObjectArray(e,r){return calcRowspanRecur(e,r,(e,r)=>e[r])}const mergeCells=applyRowspanToTable;export default mergeCells;export{calcRowspanRecur,applyRowspanToTable,calcRowspanWithTableRows,calcRowspanFromObjectArray,mergeCells};